import torch.nn as nnimport numpy as npfrom abc import abstractmethodfrom tqdm import tqdmfrom torchvision import transformsfrom utils import cn_op_2ins_space_chan_randomfrom data.datamgr import TransformLoaderfrom options import parse_argsparams = parse_args()post_flip = transforms.Compose([transforms.RandomHorizontalFlip(p=1)])post_normalize = transforms.Compose([transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])])class MetaTemplate(nn.Module):  def __init__(self, model_func, n_way, n_support, flatten=True, leakyrelu=False, change_way=True):    super(MetaTemplate, self).__init__()    self.n_way = n_way    self.n_support = n_support    self.n_query = -1    self.feature = model_func(flatten=flatten, leakyrelu=leakyrelu)    self.feat_dim = self.feature.final_feat_dim    self.change_way = change_way    self.trans_loader = TransformLoader(224)    self.temp = params.temp  @abstractmethod  def set_forward(self, x, x_aug):    pass  @abstractmethod  def set_forward_loss(self, x, x_aug):    pass  def forward(self,x):    out = self.feature.forward(x)    return out  def parse_feature(self, x):    x = x.cuda()    x = x.contiguous().view( self.n_way * (self.n_support + self.n_query), *x.size()[2:])    z_all = self.feature.forward(x)    z_all = z_all.view( self.n_way, self.n_support + self.n_query, -1)    z_support = z_all[:, :self.n_support]    z_query = z_all[:, self.n_support:]    return z_support, z_query  def correct(self, x):    scores, loss, _, _ = self.set_forward_loss(x, None)    y_query = np.repeat(range(self.n_way), self.n_query)    topk_scores, topk_labels = scores.data.topk(1, 1, True, True)    topk_ind = topk_labels.cpu().numpy()    top1_correct = np.sum(topk_ind[:,0] == y_query)    return float(top1_correct), len(y_query), loss.item()*len(y_query)  def train_loop(self, epoch, train_loader, optimizer, total_it):    self.lrptraining = True    print_freq = len(train_loader) // 1    avg_loss=0    OPEN_Prob = params.p    for i, (x, _) in enumerate(train_loader):      self.n_query = x.size(1) - self.n_support      if self.change_way:        self.n_way = x.size(0)      r = np.random.rand(1)      if self.method == 'TPN':        OPEN = r < OPEN_Prob and epoch+1 > 100  # avoid collapse caused by vanilla TPN      else:        OPEN = r < OPEN_Prob      WITH_CL = True      if OPEN:        a, b, c, h, w = x.shape        x_aug = x.reshape(a * b, c, h, w)        x_aug = post_flip(x_aug)        x_aug = cn_op_2ins_space_chan_random(x_aug, crop='content')        x_aug = x_aug.reshape(a, b, c, h, w)        # train with our losses.        if WITH_CL:          _, loss_cls, loss_con, loss_mix = self.set_forward_loss(x, x_aug)          loss = loss_cls + 0.5*(loss_con + params.w_s * loss_mix[0] + params.w_m * loss_mix[1])        # train with the augment task.        else:          x = None          _, loss_cls, _ = self.set_forward_loss(x, x_aug)          loss = loss_cls      # train with the original task.      else:        x_aug = None        _, loss_cls, _, _ = self.set_forward_loss(x, x_aug)        loss = loss_cls      optimizer.zero_grad()      loss.backward()      optimizer.step()      avg_loss = avg_loss + loss_cls.item()      if (i + 1) % print_freq==0:        print('Epoch {:d} | Batch {:d}/{:d} | Loss {:f}'.format(epoch, i + 1, len(train_loader), avg_loss/float(i+1)))      total_it += 1    return total_it  def test_loop(self, test_loader, record = None):    self.lrptraining = False    loss = 0.    count = 0    acc_all = []    iter_num = len(test_loader)    for i, (x, _) in enumerate(tqdm(test_loader)):      self.n_query = x.size(1) - self.n_support      if self.change_way:        self.n_way  = x.size(0)      correct_this, count_this, loss_this = self.correct(x)      acc_all.append(correct_this/ count_this*100)      loss += loss_this      count += count_this    acc_all  = np.asarray(acc_all)    acc_mean = np.mean(acc_all)    acc_std  = np.std(acc_all)    print('--- %d Loss = %.6f ---' %(iter_num,  loss/count))    print('--- %d Test Acc = %4.2f%% +- %4.2f%% ---' %(iter_num,  acc_mean, 1.96* acc_std/np.sqrt(iter_num)))    return acc_mean